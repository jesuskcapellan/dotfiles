#!/usr/bin/env bash

set -e  # Exit on error
set -u  # Exit on undefined variable

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
NODE_VERSION="18"
NVIM_VERSION="stable"
BACKUP_DIR="$HOME/.dotfiles_backup/$(date +%Y%m%d_%H%M%S)"

# Helper functions
log() {
    echo -e "${GREEN}[SETUP]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

backup_if_exists() {
    if [ -e "$1" ]; then
        local backup_path="$BACKUP_DIR$(dirname "$1")"
        mkdir -p "$backup_path"
        mv "$1" "$backup_path/"
        log "Backed up $1 to $backup_path/"
    fi
}

check_cmd() {
    if ! command -v "$1" &> /dev/null; then
        return 1
    fi
    return 0
}

# Detect OS
OS="unknown"
if [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
else
    error "Unsupported operating system: $OSTYPE"
fi

# Create backup directory
mkdir -p "$BACKUP_DIR"

log "Setting up your $OS environment..."

# Install package manager if needed (for macOS)
if [ "$OS" = "macos" ]; then
    if ! check_cmd brew; then
        log "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || error "Failed to install Homebrew"
        eval "$(/opt/homebrew/bin/brew shellenv)" # Add Homebrew to PATH
    fi
fi

# Install basic dependencies
log "Installing basic dependencies..."
if [ "$OS" = "linux" ]; then
    if ! check_cmd apt-get; then
        error "This Linux setup requires apt-get. Please adapt the script for your package manager."
    fi
    sudo apt-get update || error "Failed to update package list"
    sudo apt-get install -y git stow tmux fzf curl build-essential ninja-build gettext cmake unzip || error "Failed to install basic packages"
elif [ "$OS" = "macos" ]; then
    brew update || error "Failed to update Homebrew"
    brew install git stow tmux fzf curl cmake ninja gettext || error "Failed to install basic packages"
fi

# Backup existing configs
log "Backing up existing configurations..."
backup_if_exists "$HOME/.bashrc"
backup_if_exists "$HOME/.zshrc"  # macOS default shell
backup_if_exists "$HOME/.config/nvim"
backup_if_exists "$HOME/.config/tmux"
backup_if_exists "$HOME/.gitconfig"

# Install Neovim
if ! check_cmd nvim; then
    log "Installing Neovim..."
    
    if [ "$OS" = "macos" ]; then
        brew install neovim || error "Failed to install Neovim"
    else
        if [ ! -d "$HOME/programs" ]; then
            mkdir -p "$HOME/programs"
        fi
        
        if [ -d "$HOME/programs/nvim" ]; then
            rm -rf "$HOME/programs/nvim"
        fi
        
        git clone https://github.com/neovim/neovim "$HOME/programs/nvim" || error "Failed to clone Neovim repository"
        cd "$HOME/programs/nvim"
        git checkout "$NVIM_VERSION"
        make CMAKE_BUILD_TYPE=RelWithDebInfo || error "Failed to build Neovim"
        sudo make install || error "Failed to install Neovim"
        cd "$HOME"
    fi
fi

# Setup dotfiles
log "Setting up dotfiles..."
if [ ! -d "$HOME/.dotfiles" ]; then
    git clone https://github.com/jesuskcapellan/dotfiles.git "$HOME/.dotfiles" || error "Failed to clone dotfiles repository"
fi

cd "$HOME/.dotfiles"

# Create necessary directories
mkdir -p "$HOME/.config/nvim"
mkdir -p "$HOME/.config/tmux"
mkdir -p "$HOME/.local/bin"

# Stow configurations
log "Linking configurations..."
stow --target="$HOME/.config/nvim" nvim || error "Failed to stow nvim config"
stow --target="$HOME/.config/tmux" tmux || error "Failed to stow tmux config"

# Handle shell configuration based on OS
if [ "$OS" = "macos" ]; then
    if [ "$SHELL" = "/bin/zsh" ] || [ "$SHELL" = "/usr/local/bin/zsh" ]; then
        stow --target="$HOME" zsh || warn "No zsh configuration found"
    else
        stow --target="$HOME" bash || warn "No bash configuration found"
    fi
else
    stow --target="$HOME" bash || warn "No bash configuration found"
fi

cd extras
stow --target="$HOME/.config" starship || error "Failed to stow starship config"
stow --target="$HOME/.local/bin" tmux-sessionizer || error "Failed to stow tmux-sessionizer"

# Install Node via nvm
if ! check_cmd node; then
    log "Installing Node.js..."
    export NVM_DIR="$HOME/.nvm"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash || error "Failed to install nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load nvm
    nvm install "$NODE_VERSION" || error "Failed to install Node.js"
    nvm use "$NODE_VERSION" || error "Failed to use Node.js version $NODE_VERSION"
fi

# Setup Starship prompt
if ! check_cmd starship; then
    log "Installing Starship prompt..."
    curl -sS https://starship.rs/install.sh | sh || error "Failed to install Starship"
fi

# Source the appropriate shell configuration
if [ "$OS" = "macos" ] && [ "$SHELL" = "/bin/zsh" ]; then
    log "Reloading shell configuration..."
    source "$HOME/.zshrc"
else
    log "Reloading shell configuration..."
    source "$HOME/.bashrc"
fi

log "Setup completed successfully! ðŸŽ‰"
log "Backup of old configurations can be found in: $BACKUP_DIR"
log "Please restart your terminal for all changes to take effect."
